#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
محرك السيناريوهات (إصدار عربي) — مُصحّح
- نفس المنهجية (الصفحات 12–22)
- إذا كان هناك عجز: يموله المركزي بنسبة محددة => يخفض الاحتياطي
- إذا كان هناك فائض: تُخصّص نسبة منه إلى الاحتياطي => يرفع الاحتياطي
"""

from dataclasses import dataclass
from typing import Dict, Tuple
import os
import pandas as pd


@dataclass
class مدخلات:
    اسعار_النفط: list
    حجم_الصادرات_مليون_برميل_يوم: float
    الاستهلاك_المحلي_مليون_برميل_يوم: float  # ← هذا هو الاسم الصحيح
    حصة_الحكومة_من_الصادرات: float
    ايام_السنة: int

    سعر_الصرف: float  # دينار/دولار
    ايرادات_غير_نفطية_مليار: float

    اجمالي_النفقات_مليار: float
    النفقات_الجارية_مليار: float
    استخدام_الاجمالي: bool

    الاحتياطيات_الاجنبية_مليار: float
    النقد_القاعدي_مليار: float

    نسبة_تمويل_المركزي: float
    نسبة_الفائض_للاحتياطي: float

    اسم_السيناريو: str = "السيناريو الافتراضي"


def _excel_engine() -> str:
    try:
        import xlsxwriter  # noqa: F401
        return "xlsxwriter"
    except Exception:
        return "openpyxl"


def حساب_الايرادات_النفطية(سعر: float, p: مدخلات) -> float:
    # ✅ تصحيح الاسم هنا:
    صادرات = max(
        p.حجم_الصادرات_مليون_برميل_يوم - p.الاستهلاك_المحلي_مليون_برميل_يوم,
        0.0
    ) * p.حصة_الحكومة_من_الصادرات
    براميل_سنوياً = صادرات * 1_000_000 * p.ايام_السنة
    بالدولار = سعر * براميل_سنوياً
    بالدينار = بالدولار * p.سعر_الصرف
    return بالدينار / 1e9  # مليار دينار


def حساب_الموازنة(سعر: float, p: مدخلات) -> Dict[str, float]:
    ايراد_نفطي = حساب_الايرادات_النفطية(سعر, p)
    اجمالي_الايرادات = ايراد_نفطي + p.ايرادات_غير_نفطية_مليار
    الانفاق = p.اجمالي_النفقات_مليار if p.استخدام_الاجمالي else p.النفقات_الجارية_مليار
    الرصيد = اجمالي_الايرادات - الانفاق  # (+) فائض، (-) عجز

    # العجز => تمويل من المركزي (انخفاض احتياطي)
    تمويل_المركزي = -الرصيد * p.نسبة_تمويل_المركزي if الرصيد < 0 else 0.0
    انخفاض_الاحتياطي_بسبب_العجز = تمويل_المركزي

    # الفائض => جزء منه يذهب للاحتياطي
    تخصيص_فائض = (الرصيد * p.نسبة_الفائض_للاحتياطي) if الرصيد > 0 else 0.0

    # صافي التغير في الاحتياطي (+ زيادة، - انخفاض)
    صافي_تغير_الاحتياطي = تخصيص_فائض - انخفاض_الاحتياطي_بسبب_العجز
    الاحتياطي_بعد = p.الاحتياطيات_الاجنبية_مليار + صافي_تغير_الاحتياطي
    الفجوة = الاحتياطي_بعد - p.النقد_القاعدي_مليار

    return {
        "سعر النفط (دولار)": سعر,
        "الإيرادات النفطية (مليار دينار)": ايراد_نفطي,
        "الإيرادات غير النفطية (مليار دينار)": p.ايرادات_غير_نفطية_مليار,
        "إجمالي الإيرادات (مليار دينار)": اجمالي_الايرادات,
        "النفقات (مليار دينار)": الانفاق,
        "الرصيد (مليار دينار)": الرصيد,
        "تمويل المركزي (مليار دينار)": تمويل_المركزي,
        "تخصيص الفائض للاحتياطي (مليار دينار)": تخصيص_فائض,
        "صافي تغير الاحتياطي (مليار دينار)": صافي_تغير_الاحتياطي,
        "الاحتياطي بعد (مليار دينار)": الاحتياطي_بعد,
        "النقد القاعدي (مليار دينار)": p.النقد_القاعدي_مليار,
        "الفجوة (مليار دينار)": الفجوة,
    }


def تشغيل_السيناريو(p: مدخلات) -> Tuple[pd.DataFrame, Dict[str, float]]:
    rows = [حساب_الموازنة(x, p) for x in p.اسعار_النفط]
    df = pd.DataFrame(rows).sort_values("سعر النفط (دولار)").reset_index(drop=True)

    # أسوأ/أفضل رصيد
    اسوأ = df.loc[df["الرصيد (مليار دينار)"].idxmin()]
    افضل = df.loc[df["الرصيد (مليار دينار)"].idxmax()]
    # صف عند أقل سعر نفط تحديداً
    عند_اقل_سعر = df.loc[df["سعر النفط (دولار)"].idxmin()]

    ملخص = {
        "اسم السيناريو": p.اسم_السيناريو,
        "أقل سعر نفط": float(df["سعر النفط (دولار)"].min()),
        "أعلى سعر نفط": float(df["سعر النفط (دولار)"].max()),
        "أكبر عجز (ترليون)": float(اسوأ["الرصيد (مليار دينار)"] / 1000.0),
        "أكبر فائض (ترليون)": float(افضل["الرصيد (مليار دينار)"] / 1000.0),
        "الاحتياطي عند أقل سعر (ترليون)": float(عند_اقل_سعر["الاحتياطي بعد (مليار دينار)"] / 1000.0),
        "الفجوة عند أقل سعر (ترليون)": float(عند_اقل_سعر["الفجوة (مليار دينار)"] / 1000.0),
    }
    return df, ملخص


def حفظ_النتائج(df: pd.DataFrame, summary: Dict[str, float], path: str):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with pd.ExcelWriter(path, engine=_excel_engine()) as writer:
        df.to_excel(writer, sheet_name="النتائج", index=False)
        pd.DataFrame([summary]).to_excel(writer, sheet_name="الملخص", index=False)
